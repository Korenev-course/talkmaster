import os
import json
import telebot
import requests
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import KEYBOARD_CONFIG, PROMPTS

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_API_KEY = os.getenv('TELEGRAM_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_API_KEY)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

def create_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    markup = InlineKeyboardMarkup()
    for button in KEYBOARD_CONFIG:
        markup.add(InlineKeyboardButton(
            text=button['label'],
            callback_data=button['callback_data']
        ))
    return markup

def create_session(user_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_sessions[user_id] = {
        'thread_id': None,
        'messages': []
    }
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread –≤ OpenAI API
    thread = create_openai_thread()
    user_sessions[user_id]['thread_id'] = thread['id']
    return user_sessions[user_id]

def get_session(user_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    """
    if user_id not in user_sessions:
        return create_session(user_id)
    return user_sessions[user_id]

def create_openai_thread():
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π thread –≤ OpenAI API
    """
    url = "https://api.openai.com/v1/threads"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
        "OpenAI-Beta": "assistants=v1"
    }
    response = requests.post(url, headers=headers, json={})
    return response.json()

def add_message_to_thread(thread_id, content):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ thread OpenAI
    """
    url = f"https://api.openai.com/v1/threads/{thread_id}/messages"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
        "OpenAI-Beta": "assistants=v1"
    }
    data = {
        "role": "user",
        "content": content
    }
    response = requests.post(url, headers=headers, json=data)
    return response.json()

def run_assistant(thread_id, prompt=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω prompt, –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    url = f"https://api.openai.com/v1/threads/{thread_id}/runs"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
        "OpenAI-Beta": "assistants=v1"
    }
    
    # ID –≤–∞—à–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ OpenAI
    assistant_id = os.getenv('OPENAI_ASSISTANT_ID')
    
    data = {
        "assistant_id": assistant_id
    }
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω prompt, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if prompt:
        data["instructions"] = prompt
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    response = requests.post(url, headers=headers, json=data)
    run_data = response.json()
    run_id = run_data.get('id')
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    return wait_for_run_completion(thread_id, run_id)

def wait_for_run_completion(thread_id, run_id):
    """
    –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    url = f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Beta": "assistants=v1"
    }
    
    while True:
        response = requests.get(url, headers=headers)
        run_data = response.json()
        status = run_data.get('status')
        
        if status == 'completed':
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ–¥–∞
            return get_thread_messages(thread_id)
        elif status in ['failed', 'expired', 'cancelled']:
            return {"error": f"Run ended with status: {status}"}
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        import time
        time.sleep(1)

def get_thread_messages(thread_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    url = f"https://api.openai.com/v1/threads/{thread_id}/messages"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Beta": "assistants=v1"
    }
    
    response = requests.get(url, headers=headers)
    messages_data = response.json()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    for message in messages_data.get('data', []):
        if message.get('role') == 'assistant':
            return {
                "content": message.get('content', [{}])[0].get('text', {}).get('value', 'No response')
            }
    
    return {"error": "No assistant messages found"}

@bot.message_handler(commands=['start'])
def start_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    create_session(user_id)
    
    welcome_text = "üëã Welcome to English Practice Bot! Let's chat in English to improve your skills. What would you like to talk about today?"
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    user_id = call.from_user.id
    
    if call.data == 'start':
        # –†–µ—Å—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞
        create_session(user_id)
        bot.send_message(call.message.chat.id, "Conversation has been restarted! Let's practice your English.", reply_markup=create_keyboard())
    
    elif call.data == 'desc':
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        session = get_session(user_id)
        
        if not session.get('messages'):
            bot.send_message(call.message.chat.id, "There are no messages to explain yet.", reply_markup=create_keyboard())
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –±–æ—Ç–∞
        thread_id = session['thread_id']
        add_message_to_thread(thread_id, PROMPTS['desc'])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = run_assistant(thread_id)
        
        if 'error' in response:
            bot.send_message(call.message.chat.id, f"Error: {response['error']}", reply_markup=create_keyboard())
        else:
            bot.send_message(call.message.chat.id, response['content'], reply_markup=create_keyboard())
    
    # –£–±–∏—Ä–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫—É" —Å –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    user_id = message.from_user.id
    user_message = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = get_session(user_id)
    thread_id = session['thread_id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    session['messages'].append({"role": "user", "content": user_message})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI API
    add_message_to_thread(thread_id, user_message)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    response = run_assistant(thread_id)
    
    if 'error' in response:
        bot.send_message(message.chat.id, f"Error: {response['error']}", reply_markup=create_keyboard())
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        assistant_message = response['content']
        session['messages'].append({"role": "assistant", "content": assistant_message})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, assistant_message, reply_markup=create_keyboard())

if __name__ == '__main__':
    print("Bot started...")
    bot.polling(none_stop=True)
